import { AppService } from './app.service';
import {
  Ctx,
  Hears,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { Context } from './context.interface';
import { actionButtons } from './buttons/app.buttons';
import { showList } from './utils/app.utils';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! Friend ü§ô');
    await ctx.reply(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n\n –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?',
      actionButtons(),
    );
  }
  @Hears('–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
  async createTask(ctx: Context) {
    ctx.session.type = 'create';
    await ctx.reply('‚úèÔ∏è –¢–≤–æ—è –∑–∞–¥–∞—á–∞: ');
  }

  @Hears('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
  async listTask(ctx: Context) {
    const todos = await this.appService.getAll();
    await ctx.reply(showList(todos));
  }

  @Hears('–ó–∞–≤–µ—Ä—à–∏—Ç—å')
  async doneTask(ctx: Context) {
    await ctx.reply('‚úèÔ∏è –ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ');
    ctx.session.type = 'done';
  }

  @Hears('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
  async editTask(ctx: Context) {
    ctx.session.type = 'edit';
    await ctx.deleteMessage();
    await ctx.replyWithHTML(
      '‚úèÔ∏è –ù–∞–ø–∏—à–∏ id –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' +
        '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>1, –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ </b> ',
    );
  }

  @Hears('–£–¥–∞–ª–µ–Ω–∏–µ')
  async deleteTask(ctx: Context) {
    ctx.session.type = 'remove';
    await ctx.reply('‚úèÔ∏è–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ');
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    if (!ctx.session.type) {
      return;
    }

    if (ctx.session.type === 'done') {
      const todos = await this.appService.doneTask(Number(message));

      if (!todos) {
        await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! \n\n –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!');
        return;
      }
      await ctx.reply(showList(todos));
    }

    if (ctx.session.type === 'create') {
      const todos = await this.appService.createTask(message);
      await ctx.reply(showList(todos));
    }

    if (ctx.session.type === 'edit') {
      const [taskId, taskName] = message.split(', ');
      if (!taskId || !taskName) {
        await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö! \n\n –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!');
        return;
      }
      const todos = await this.appService.editTask(Number(taskId), taskName);

      if (!todos) {
        await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! \n\n –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!');
        return;
      }
      await ctx.reply(showList(todos));
    }

    if (ctx.session.type === 'remove') {
      const todos = await this.appService.deleteTask(Number(message));

      if (!todos) {
        await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! \n\n –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!');
        return;
      }
      await ctx.reply(showList(todos));
    }
  }
}
